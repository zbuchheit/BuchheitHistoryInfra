name: BuchheitHistory-App
runtime: yaml
description: BuchheitHistory App Infra in YAML
configuration:
  environment:
    type: String
  appName:
    type: String
  jwtSecretKey:
    type: String
variables:
  resourceGroupName:
    Fn::StackReference:
      - zbuchheit/BuchheitHistory-Core/dev
      - resourceGroupName  
  databaseConnectionString:
    Fn::StackReference:
      - zbuchheit/BuchheitHistory-Database/dev
      - databaseConnectionString         
  workspaceSharedKeys:
    Fn::Invoke:
      Function: azure-native:operationalinsights:getSharedKeys
      Arguments:
        resourceGroupName: ${resourceGroupName}
        workspaceName: ${workspace.name} 
      Return: primarySharedKey  
  adminUsername:
    Fn::Invoke:
      Function: azure-native:containerregistry:listRegistryCredentials
      Arguments:
        resourceGroupName: ${resourceGroupName}
        registryName: ${containerRegistry.name}
      Return: username 
  adminPasswords:
    Fn::Invoke:
      Function: azure-native:containerregistry:listRegistryCredentials
      Arguments:
        resourceGroupName: ${resourceGroupName}
        registryName: ${containerRegistry.name}
      Return: passwords                 
resources:
  storageAccount:
    type: azure-native:storage:StorageAccount
    properties:
      accountName: buchheithistorysa
      resourceGroupName: ${resourceGroupName}
      sku:
        name: Standard_LRS
      kind: StorageV2
  workspace: 
    type: azure-native:operationalinsights:Workspace
    properties:
      resourceGroupName: ${resourceGroupName}
      sku:
        name: "PerGB2018"
      retentionInDays: 30
  kubeEnvironment:
    type: azure-native:app:ManagedEnvironment
    properties:
      name: kubeenvbuchheithistory
      resourceGroupName: ${resourceGroupName}
      location: eastus2
      appLogsConfiguration:
        destination: "log-analytics"
        logAnalyticsConfiguration:
          customerId: ${workspace.customerId}
          sharedKey: ${workspaceSharedKeys}    
  containerRegistry:
    type: azure-native:containerregistry:Registry
    properties:
      registryName: buchheithistoryacr
      resourceGroupName: ${resourceGroupName}
      sku:
        name: "Basic"
      adminUserEnabled: true          
  containerApp:
    type: azure-native:app:ContainerApp
    properties:
      name: buchheithistoryapi
      resourceGroupName: ${resourceGroupName}
      location: eastus2
      managedEnvironmentId: ${kubeEnvironment.id}
      identity:
        type: "SystemAssigned"
      configuration:
        ingress:
          external: true
          targetPort: 8080
        registries:
          - server: ${containerRegistry.loginServer}
            username: ${adminUsername}
            passwordSecretRef: pwd
        secrets:
          - name: pwd
            value: ${adminPasswords[0].value}
          - name: databaseconnectionstring
            value: ${databaseConnectionString}
          - name: jwtsecretkey
            value: ${jwtSecretKey}
      template:
        containers:
          - name: buchheithistoryapi
            image: mcr.microsoft.com/azuredocs/containerapps-helloworld:latest
            env:
              - name: spring.data.mongodb.uri
                secretRef: databaseconnectionstring
              - name: spring.data.mongodb.database
                value: BuchheitHistoryDb
              - name: application.jwt.secretKey
                secretRef: jwtsecretkey
              - name: application.jwt.tokenPrefix
                value: "Bearer "
              - name: application.jwt.accessTokenExpiresAfterHours
                value: "1"
              - name: application.jwt.refreshTokenExpiresAfterDays
                value: "7"
    options:
      parent: ${kubeEnvironment}  
  staticSite:
    type: azure-native:web:StaticSite
    properties:
      branch: main
      location: eastus2
      name: buchheithistorysite
      repositoryUrl: https://github.com/zbuchheit/BuchheitHistoryUI
      resourceGroupName: ${resourceGroupName}
      sku:
        name: Free
        tier: Free
    options:
      customTimeouts:
        delete: "30m"




# outputs:
#   # Export the primary key of the Storage Account
#   primaryStorageKey: ${storageAccountKeys.keys[0].value}
